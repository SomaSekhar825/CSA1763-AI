import heapq

goal = [1, 2, 3, 4, 5, 6, 7, 8, 0]

def manhattan(s):  
    return sum(abs(b % 3 - g % 3) + abs(b // 3 - g // 3) 
               for b, g in ((s.index(i), goal.index(i)) for i in range(1, 9)))

def neighbors(state):  
    b = state.index(0)
    moves = []
    for d in (-1, 1, -3, 3):  
        n = b + d
        if 0 <= n < 9 and (b % 3 != 2 or d != 1) and (b % 3 != 0 or d != -1):
            new_state = state[:]
            new_state[b], new_state[n] = new_state[n], new_state[b]
            moves.append(new_state)
    return moves

def a_star(start):
    pq, visited = [(manhattan(start), start, [])], set()
    while pq:
        _, state, path = heapq.heappop(pq)
        if state == goal:
            return path + [state]
        visited.add(tuple(state))
        for n in neighbors(state):
            if tuple(n) not in visited:
                heapq.heappush(pq, (len(path) + manhattan(n), n, path + [state]))

initial = [1, 2, 3, 4, 0, 5, 6, 7, 8]  
solution = a_star(initial)
for step in solution:
    for i in range(0, 9, 3):
        print(step[i:i+3])
    print()
