from collections import deque


def is_goal(state, goal):
    return goal in state


def get_next_states(state, a_max, b_max):
    a, b = state
    next_states = [
        (a_max, b),     
        (a, b_max),     
        (0, b),          
        (a, 0),          
        (min(a + b, a_max), b - (min(a_max - a, b))),  
        (a - (min(b_max - b, a)), min(a + b, b_max))   
    ]
    return next_states

def water_jug_bfs(a_max, b_max, goal):
    queue = deque([((0, 0), [])])
    visited = set([(0, 0)])

    while queue:
        (current_state, path) = queue.popleft()

        if is_goal(current_state, goal):
            return path + [current_state]

        for next_state in get_next_states(current_state, a_max, b_max):
            if next_state not in visited:
                visited.add(next_state)
                queue.append((next_state, path + [current_state]))

    return None

jug_a_capacity = 3  
jug_b_capacity = 4  
goal_amount = 2     

solution = water_jug_bfs(jug_a_capacity, jug_b_capacity, goal_amount)

if solution:
    print("Solution found:")
    for step in solution:
        print(f"Jug A: {step[0]} liters, Jug B: {step[1]} liters")
else:
    print("No solution found.")
